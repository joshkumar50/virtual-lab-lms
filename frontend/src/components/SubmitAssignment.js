import React, { useState } from 'react';\nimport { useLab } from '../context/LabContext';\nimport { motion } from 'framer-motion';\nimport { X, Send, FileText, Clock, Target, CheckCircle } from 'lucide-react';\nimport toast from 'react-hot-toast';\n\nconst SubmitAssignment = ({ isOpen, onClose, assignment, onSubmissionComplete }) => {\n  const { submitAssignment } = useLab();\n  const [formData, setFormData] = useState({\n    content: '',\n    labResults: {},\n    observations: '',\n    conclusions: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [labCompleted, setLabCompleted] = useState(false);\n  const [labResults, setLabResults] = useState(null);\n\n  const handleLabComplete = (results) => {\n    setLabResults(results);\n    setLabCompleted(true);\n    setFormData(prev => ({ ...prev, labResults: results }));\n    toast.success('Lab simulation completed! Now submit your report.');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const submissionData = {\n        content: formData.content,\n        labResults: formData.labResults,\n        observations: formData.observations,\n        conclusions: formData.conclusions,\n        completedAt: new Date().toISOString()\n      };\n\n      const result = await submitAssignment(assignment._id, submissionData);\n      \n      if (result.success) {\n        toast.success('Assignment submitted successfully!');\n        onSubmissionComplete && onSubmissionComplete(result.submission);\n        onClose();\n        setFormData({\n          content: '',\n          labResults: {},\n          observations: '',\n          conclusions: ''\n        });\n        setLabCompleted(false);\n        setLabResults(null);\n      } else {\n        toast.error('Failed to submit assignment');\n      }\n    } catch (error) {\n      toast.error('An error occurred while submitting');\n      console.error('Submission error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const simulateLabCompletion = () => {\n    // Simulate lab completion based on assignment type\n    const mockResults = {\n      'electronics': {\n        voltage: 12,\n        current: 3,\n        resistance: 4,\n        power: 36,\n        accuracy: 95,\n        measurements: 10\n      },\n      'physics': {\n        period: 2.01,\n        length: 1.0,\n        gravity: 9.81,\n        amplitude: 0.1,\n        accuracy: 92,\n        oscillations: 20\n      },\n      'chemistry': {\n        pH_initial: 7.0,\n        pH_final: 3.2,\n        color_change: 'blue to red',\n        reaction_time: 15.5,\n        accuracy: 88,\n        observations: 5\n      }\n    };\n\n    const results = mockResults[assignment.labType] || mockResults.electronics;\n    handleLabComplete(results);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n      >\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Submit Assignment</h2>\n            <p className=\"text-sm text-gray-600\">{assignment?.title}</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Assignment Info */}\n          <div className=\"bg-blue-50 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Target className=\"w-5 h-5 text-blue-600\" />\n              <h3 className=\"font-medium text-blue-900\">Assignment Details</h3>\n            </div>\n            <p className=\"text-blue-800 text-sm mb-2\">{assignment?.description}</p>\n            <div className=\"flex items-center space-x-4 text-sm text-blue-700\">\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"w-4 h-4\" />\n                <span>Due: {assignment?.dueDate ? new Date(assignment.dueDate).toLocaleDateString() : 'No due date'}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <FileText className=\"w-4 h-4\" />\n                <span>Lab: {assignment?.labTitle}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Target className=\"w-4 h-4\" />\n                <span>Max Score: {assignment?.maxScore || 100}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Lab Simulation Section */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"font-medium text-gray-900 mb-3\">Step 1: Complete Lab Simulation</h3>\n            {!labCompleted ? (\n              <div className=\"text-center py-6\">\n                <p className=\"text-gray-600 mb-4\">\n                  Complete the virtual lab simulation to gather your results.\n                </p>\n                <button\n                  onClick={simulateLabCompletion}\n                  className=\"btn btn-primary\"\n                >\n                  Start {assignment?.labTitle} Simulation\n                </button>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  Demo: Click to simulate lab completion\n                </p>\n              </div>\n            ) : (\n              <div className=\"bg-green-50 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"font-medium text-green-900\">Lab Completed Successfully!</span>\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                  {Object.entries(labResults || {}).map(([key, value]) => (\n                    <div key={key} className=\"bg-white rounded p-2\">\n                      <div className=\"text-gray-600 capitalize\">{key.replace('_', ' ')}</div>\n                      <div className=\"font-medium text-gray-900\">\n                        {typeof value === 'number' ? value.toFixed(2) : value}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Submission Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Lab Report / Summary *\n              </label>\n              <textarea\n                value={formData.content}\n                onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                className=\"input\"\n                rows={4}\n                placeholder=\"Summarize your lab findings, methodology, and results...\"\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Observations\n              </label>\n              <textarea\n                value={formData.observations}\n                onChange={(e) => setFormData({ ...formData, observations: e.target.value })}\n                className=\"input\"\n                rows={3}\n                placeholder=\"What did you observe during the lab simulation?\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Conclusions\n              </label>\n              <textarea\n                value={formData.conclusions}\n                onChange={(e) => setFormData({ ...formData, conclusions: e.target.value })}\n                className=\"input\"\n                rows={3}\n                placeholder=\"What conclusions can you draw from your results?\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"btn btn-secondary\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={loading || !labCompleted}\n                className=\"btn btn-primary flex items-center space-x-2\"\n              >\n                <Send className=\"w-4 h-4\" />\n                <span>{loading ? 'Submitting...' : 'Submit Assignment'}</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default SubmitAssignment;